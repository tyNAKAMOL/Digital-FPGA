////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : ALU.vf
// /___/   /\     Timestamp : 11/15/2021 13:12:25
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/Users/beaut/Desktop/flie/LAB9NEW/ALU.vf -w C:/Users/beaut/Desktop/flie/LAB9NEW/ALU.sch
//Design Name: ALU
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module D4_16E_HXILINX_ALU (D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, A0, A1, A2, A3, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;
   output D8;
   output D9;
   output D10;
   output D11;
   output D12;
   output D13;
   output D14;
   output D15;

   input  A0;
   input  A1;
   input  A2;
   input  A3;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;
   reg D8;
   reg D9;
   reg D10;
   reg D11;
   reg D12;
   reg D13;
   reg D14;
   reg D15;

      always @ (A0 or A1 or A2 or A3 or E)
      begin
         if(!E)
           {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0000;
        else
        begin
           case({A3,A2,A1,A0})
             4'b0000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0001;
             4'b0001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0010;
             4'b0010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0100;
             4'b0011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_1000;
             4'b0100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0001_0000;
             4'b0101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0010_0000;
             4'b0110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0100_0000;
             4'b0111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_1000_0000;
             4'b1000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0001_0000_0000;
             4'b1001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0010_0000_0000;
             4'b1010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0100_0000_0000;
             4'b1011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_1000_0000_0000;
             4'b1100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0001_0000_0000_0000;
             4'b1101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0010_0000_0000_0000;
             4'b1110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0100_0000_0000_0000;
             4'b1111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b1000_0000_0000_0000;
          endcase
        end
     end 

endmodule
`timescale  100 ps / 10 ps

module ADD8_HXILINX_ALU (CO, OFL, S, A, B, CI);


   output 	      CO;
   output 	      OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  [7:0]       B;
   input              CI;

   assign   {CO, S} = A + B + CI;
   assign   OFL     = ( A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]);

endmodule
`timescale  100 ps / 10 ps

module INV8_HXILINX_ALU (O, I);
    

   output [7:0] O;

   input  [7:0] I;

assign O = ~I;
endmodule
`timescale  100 ps / 10 ps

module OR6_HXILINX_ALU (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = (I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale  100 ps / 10 ps

module ADSU8_HXILINX_ALU (CO, OFL, S, A, ADD, B, CI);

   
   output             CO;
   output             OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  	      ADD;
   input  [7:0]       B;
   input              CI;

   reg    [8:0]       adsu_tmp;  

   always @ (A, ADD, B, CI) 
   begin
      if(ADD)
         adsu_tmp = A + B + CI;
      else
         adsu_tmp = A - (!CI) - B;
   end

   assign S   =  adsu_tmp[7:0];
   assign CO  =  ADD ? adsu_tmp[8] : ~adsu_tmp[8];
   assign OFL =  ADD ? ( (A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]) ) : ( (A[7] & (~B[7]) & (~S[7])) | ((~A[7]) & B[7] & S[7]) );

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_ALU (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module M2_1_HXILINX_ALU (O, D0, D1, S0);
    

   output O;

   input  D0;
   input  D1;
   input  S0;

   reg O;

   always @ ( D0 or D1 or S0)
   begin
      case(S0)
      1'b0 : O <= D0;
      1'b1 : O <= D1;
      endcase
   end
    
endmodule
`timescale 1ns / 1ps

module DIV10_MUSER_ALU(CLKIN, 
                       CLKOUT);

    input CLKIN;
   output CLKOUT;
   
   wire XLXN_36;
   wire XLXN_38;
   wire XLXN_41;
   wire XLXN_45;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_51;
   wire CLKOUT_DUMMY;
   
   assign CLKOUT = CLKOUT_DUMMY;
   FDC  XLXI_14 (.C(CLKIN), 
                .CLR(), 
                .D(XLXN_49), 
                .Q(XLXN_48));
   FDC  XLXI_15 (.C(XLXN_49), 
                .CLR(), 
                .D(XLXN_36), 
                .Q(XLXN_50));
   FDC  XLXI_16 (.C(XLXN_36), 
                .CLR(XLXN_45), 
                .D(XLXN_38), 
                .Q(XLXN_51));
   FDC  XLXI_17 (.C(XLXN_38), 
                .CLR(XLXN_45), 
                .D(CLKOUT_DUMMY), 
                .Q(XLXN_41));
   INV  XLXI_18 (.I(XLXN_48), 
                .O(XLXN_49));
   INV  XLXI_32 (.I(XLXN_50), 
                .O(XLXN_36));
   INV  XLXI_33 (.I(XLXN_51), 
                .O(XLXN_38));
   AND2  XLXI_34 (.I0(XLXN_50), 
                 .I1(XLXN_41), 
                 .O(XLXN_45));
   INV  XLXI_35 (.I(XLXN_41), 
                .O(CLKOUT_DUMMY));
endmodule
`timescale 1ns / 1ps

module Div100K_MUSER_ALU(CN, 
                         CO);

    input CN;
   output CO;
   
   wire o1;
   wire o2;
   wire o3;
   wire XLXN_19;
   
   DIV10_MUSER_ALU  XLXI_23 (.CLKIN(CN), 
                            .CLKOUT(o1));
   DIV10_MUSER_ALU  XLXI_24 (.CLKIN(o1), 
                            .CLKOUT(o2));
   DIV10_MUSER_ALU  XLXI_25 (.CLKIN(o2), 
                            .CLKOUT(o3));
   DIV10_MUSER_ALU  XLXI_26 (.CLKIN(o3), 
                            .CLKOUT(XLXN_19));
   DIV10_MUSER_ALU  XLXI_27 (.CLKIN(XLXN_19), 
                            .CLKOUT(CO));
endmodule
`timescale 1ns / 1ps

module MUX8to1_MUSER_ALU(CLK200Hz, 
                         P1, 
                         P2, 
                         P3, 
                         P4, 
                         S0, 
                         S1, 
                         COM0, 
                         COM1, 
                         COM2, 
                         COM3, 
                         OP);

    input CLK200Hz;
    input [7:0] P1;
    input [7:0] P2;
    input [7:0] P3;
    input [7:0] P4;
    input S0;
    input S1;
   output COM0;
   output COM1;
   output COM2;
   output COM3;
   output [3:0] OP;
   
   wire XLXN_37;
   wire XLXN_45;
   wire XLXN_46;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_51;
   wire XLXN_53;
   wire XLXN_54;
   wire XLXN_56;
   wire COM1_DUMMY;
   
   assign COM1 = COM1_DUMMY;
   (* HU_SET = "XLXI_1_39" *) 
   M4_1E_HXILINX_ALU  XLXI_1 (.D0(P1[2]), 
                             .D1(P2[2]), 
                             .D2(P3[2]), 
                             .D3(P4[2]), 
                             .E(XLXN_37), 
                             .S0(S0), 
                             .S1(S1), 
                             .O(XLXN_48));
   (* HU_SET = "XLXI_2_46" *) 
   M4_1E_HXILINX_ALU  XLXI_2 (.D0(P1[1]), 
                             .D1(P2[1]), 
                             .D2(P3[1]), 
                             .D3(P4[1]), 
                             .E(XLXN_37), 
                             .S0(S0), 
                             .S1(S1), 
                             .O(XLXN_46));
   (* HU_SET = "XLXI_3_40" *) 
   M4_1E_HXILINX_ALU  XLXI_3 (.D0(P1[3]), 
                             .D1(P2[3]), 
                             .D2(P3[3]), 
                             .D3(P4[3]), 
                             .E(XLXN_37), 
                             .S0(S0), 
                             .S1(S1), 
                             .O(XLXN_49));
   (* HU_SET = "XLXI_4_43" *) 
   M4_1E_HXILINX_ALU  XLXI_4 (.D0(P1[6]), 
                             .D1(P2[6]), 
                             .D2(P3[6]), 
                             .D3(P4[6]), 
                             .E(XLXN_37), 
                             .S0(S0), 
                             .S1(S1), 
                             .O(XLXN_54));
   (* HU_SET = "XLXI_5_41" *) 
   M4_1E_HXILINX_ALU  XLXI_5 (.D0(P1[4]), 
                             .D1(P2[4]), 
                             .D2(P3[4]), 
                             .D3(P4[4]), 
                             .E(XLXN_37), 
                             .S0(S0), 
                             .S1(S1), 
                             .O(XLXN_51));
   (* HU_SET = "XLXI_6_44" *) 
   M4_1E_HXILINX_ALU  XLXI_6 (.D0(P1[7]), 
                             .D1(P2[7]), 
                             .D2(P3[7]), 
                             .D3(P4[7]), 
                             .E(XLXN_37), 
                             .S0(S0), 
                             .S1(S1), 
                             .O(XLXN_56));
   (* HU_SET = "XLXI_7_42" *) 
   M4_1E_HXILINX_ALU  XLXI_7 (.D0(P1[5]), 
                             .D1(P2[5]), 
                             .D2(P3[5]), 
                             .D3(P4[5]), 
                             .E(XLXN_37), 
                             .S0(S0), 
                             .S1(S1), 
                             .O(XLXN_53));
   (* HU_SET = "XLXI_8_45" *) 
   M4_1E_HXILINX_ALU  XLXI_8 (.D0(P1[0]), 
                             .D1(P2[0]), 
                             .D2(P3[0]), 
                             .D3(P4[0]), 
                             .E(XLXN_37), 
                             .S0(S0), 
                             .S1(S1), 
                             .O(XLXN_45));
   VCC  XLXI_17 (.P(XLXN_37));
   (* HU_SET = "XLXI_18_47" *) 
   M2_1_HXILINX_ALU  XLXI_18 (.D0(XLXN_45), 
                             .D1(XLXN_51), 
                             .S0(CLK200Hz), 
                             .O(OP[0]));
   (* HU_SET = "XLXI_19_48" *) 
   M2_1_HXILINX_ALU  XLXI_19 (.D0(XLXN_46), 
                             .D1(XLXN_53), 
                             .S0(CLK200Hz), 
                             .O(OP[1]));
   (* HU_SET = "XLXI_20_49" *) 
   M2_1_HXILINX_ALU  XLXI_20 (.D0(XLXN_48), 
                             .D1(XLXN_54), 
                             .S0(CLK200Hz), 
                             .O(OP[2]));
   (* HU_SET = "XLXI_21_50" *) 
   M2_1_HXILINX_ALU  XLXI_21 (.D0(XLXN_49), 
                             .D1(XLXN_56), 
                             .S0(CLK200Hz), 
                             .O(OP[3]));
   INV  XLXI_22 (.I(CLK200Hz), 
                .O(COM1_DUMMY));
   INV  XLXI_23 (.I(COM1_DUMMY), 
                .O(COM0));
   VCC  XLXI_24 (.P(COM2));
   VCC  XLXI_25 (.P(COM3));
endmodule
`timescale 1ns / 1ps

module CATEXOR_MUSER_ALU(D, 
                         S, 
                         OUP);

    input [7:0] D;
    input [7:0] S;
   output [7:0] OUP;
   
   
   XOR2  XLXI_1 (.I0(D[1]), 
                .I1(S[1]), 
                .O(OUP[1]));
   XOR2  XLXI_2 (.I0(D[2]), 
                .I1(S[2]), 
                .O(OUP[2]));
   XOR2  XLXI_3 (.I0(D[3]), 
                .I1(S[3]), 
                .O(OUP[3]));
   XOR2  XLXI_4 (.I0(D[4]), 
                .I1(S[4]), 
                .O(OUP[4]));
   XOR2  XLXI_5 (.I0(D[5]), 
                .I1(S[5]), 
                .O(OUP[5]));
   XOR2  XLXI_6 (.I0(D[6]), 
                .I1(S[6]), 
                .O(OUP[6]));
   XOR2  XLXI_7 (.I0(D[7]), 
                .I1(S[7]), 
                .O(OUP[7]));
   XOR2  XLXI_8 (.I0(D[0]), 
                .I1(S[0]), 
                .O(OUP[0]));
endmodule
`timescale 1ns / 1ps

module SHL_MUSER_ALU(INPUT, 
                     OUTPUT);

    input [7:0] INPUT;
   output [7:0] OUTPUT;
   
   wire [7:0] N;
   
   (* HU_SET = "XLXI_1_51" *) 
   INV8_HXILINX_ALU  XLXI_1 (.I(INPUT[7:0]), 
                            .O(N[7:0]));
   INV  XLXI_13 (.I(N[0]), 
                .O(OUTPUT[1]));
   INV  XLXI_14 (.I(N[1]), 
                .O(OUTPUT[2]));
   INV  XLXI_15 (.I(N[2]), 
                .O(OUTPUT[3]));
   INV  XLXI_16 (.I(N[3]), 
                .O(OUTPUT[4]));
   INV  XLXI_17 (.I(N[4]), 
                .O(OUTPUT[5]));
   INV  XLXI_18 (.I(N[5]), 
                .O(OUTPUT[6]));
   INV  XLXI_19 (.I(N[6]), 
                .O(OUTPUT[7]));
   GND  XLXI_21 (.G(OUTPUT[0]));
   GND  XLXI_22 (.G(N[7]));
endmodule
`timescale 1ns / 1ps

module SUB_MUSER_ALU(D, 
                     S, 
                     OUTPUT);

    input [7:0] D;
    input [7:0] S;
   output [7:0] OUTPUT;
   
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   
   VCC  XLXI_3 (.P(XLXN_5));
   (* HU_SET = "XLXI_4_52" *) 
   ADSU8_HXILINX_ALU  XLXI_4 (.A(S[7:0]), 
                             .ADD(XLXN_6), 
                             .B(D[7:0]), 
                             .CI(XLXN_5), 
                             .CO(XLXN_7), 
                             .OFL(XLXN_7), 
                             .S(OUTPUT[7:0]));
   GND  XLXI_5 (.G(XLXN_6));
   GND  XLXI_6 (.G(XLXN_7));
endmodule
`timescale 1ns / 1ps

module ADD_MUSER_ALU(D, 
                     S, 
                     OUTPUT);

    input [7:0] D;
    input [7:0] S;
   output [7:0] OUTPUT;
   
   wire XLXN_4;
   
   (* HU_SET = "XLXI_1_53" *) 
   ADD8_HXILINX_ALU  XLXI_1 (.A(S[7:0]), 
                            .B(D[7:0]), 
                            .CI(XLXN_4), 
                            .CO(), 
                            .OFL(), 
                            .S(OUTPUT[7:0]));
   GND  XLXI_2 (.G(XLXN_4));
endmodule
`timescale 1ns / 1ps

module OPERATER_MUSER_ALU(D, 
                          S, 
                          A, 
                          SH, 
                          SU, 
                          X);

    input [7:0] D;
    input [7:0] S;
   output [7:0] A;
   output [7:0] SH;
   output [7:0] SU;
   output [7:0] X;
   
   
   ADD_MUSER_ALU  XLXI_1 (.D(D[7:0]), 
                         .S(S[7:0]), 
                         .OUTPUT(A[7:0]));
   SUB_MUSER_ALU  XLXI_2 (.D(D[7:0]), 
                         .S(S[7:0]), 
                         .OUTPUT(SU[7:0]));
   SHL_MUSER_ALU  XLXI_4 (.INPUT(S[7:0]), 
                         .OUTPUT(SH[7:0]));
   CATEXOR_MUSER_ALU  XLXI_6 (.D(D[7:0]), 
                             .S(S[7:0]), 
                             .OUP(X[7:0]));
endmodule
`timescale 1ns / 1ps

module Display_LED_MUSER_ALU(X, 
                             Y);

    input [7:0] X;
   output [7:0] Y;
   
   
   BUF  XLXI_1 (.I(X[0]), 
               .O(Y[0]));
   BUF  XLXI_2 (.I(X[1]), 
               .O(Y[1]));
   BUF  XLXI_3 (.I(X[2]), 
               .O(Y[2]));
   BUF  XLXI_4 (.I(X[3]), 
               .O(Y[3]));
   BUF  XLXI_5 (.I(X[4]), 
               .O(Y[4]));
   BUF  XLXI_6 (.I(X[5]), 
               .O(Y[5]));
   BUF  XLXI_7 (.I(X[6]), 
               .O(Y[6]));
   BUF  XLXI_8 (.I(X[7]), 
               .O(Y[7]));
endmodule
`timescale 1ns / 1ps

module BCD_TO_7SEG_MUSER_ALU(BIT, 
                             SEG);

    input [3:0] BIT;
   output [6:0] SEG;
   
   wire D0;
   wire D1;
   wire D2;
   wire D3;
   wire D4;
   wire D5;
   wire D6;
   wire D7;
   wire D8;
   wire D9;
   wire D10;
   wire D11;
   wire D12;
   wire D13;
   wire D14;
   wire D15;
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_71;
   
   (* HU_SET = "XLXI_1_56" *) 
   D4_16E_HXILINX_ALU  XLXI_1 (.A0(BIT[0]), 
                              .A1(BIT[1]), 
                              .A2(BIT[2]), 
                              .A3(BIT[3]), 
                              .E(XLXN_71), 
                              .D0(D0), 
                              .D1(D1), 
                              .D2(D2), 
                              .D3(D3), 
                              .D4(D4), 
                              .D5(D5), 
                              .D6(D6), 
                              .D7(D7), 
                              .D8(D8), 
                              .D9(D9), 
                              .D10(D10), 
                              .D11(D11), 
                              .D12(D12), 
                              .D13(D13), 
                              .D14(D14), 
                              .D15(D15));
   OR4  XLXI_2 (.I0(D11), 
               .I1(D13), 
               .I2(D4), 
               .I3(D1), 
               .O(XLXN_1));
   (* HU_SET = "XLXI_3_54" *) 
   OR6_HXILINX_ALU  XLXI_3 (.I0(D15), 
                           .I1(D14), 
                           .I2(D12), 
                           .I3(D11), 
                           .I4(D6), 
                           .I5(D5), 
                           .O(XLXN_2));
   OR4  XLXI_4 (.I0(D15), 
               .I1(D14), 
               .I2(D12), 
               .I3(D2), 
               .O(XLXN_3));
   OR5  XLXI_5 (.I0(D15), 
               .I1(D10), 
               .I2(D7), 
               .I3(D4), 
               .I4(D1), 
               .O(XLXN_4));
   (* HU_SET = "XLXI_6_55" *) 
   OR6_HXILINX_ALU  XLXI_6 (.I0(D9), 
                           .I1(D7), 
                           .I2(D5), 
                           .I3(D4), 
                           .I4(D3), 
                           .I5(D1), 
                           .O(XLXN_5));
   OR5  XLXI_7 (.I0(D13), 
               .I1(D7), 
               .I2(D3), 
               .I3(D2), 
               .I4(D1), 
               .O(XLXN_6));
   OR4  XLXI_8 (.I0(D12), 
               .I1(D7), 
               .I2(D1), 
               .I3(D0), 
               .O(XLXN_7));
   INV  XLXI_10 (.I(XLXN_1), 
                .O(SEG[0]));
   INV  XLXI_11 (.I(XLXN_2), 
                .O(SEG[1]));
   INV  XLXI_12 (.I(XLXN_3), 
                .O(SEG[2]));
   INV  XLXI_13 (.I(XLXN_4), 
                .O(SEG[3]));
   INV  XLXI_14 (.I(XLXN_5), 
                .O(SEG[4]));
   INV  XLXI_15 (.I(XLXN_6), 
                .O(SEG[5]));
   INV  XLXI_16 (.I(XLXN_7), 
                .O(SEG[6]));
   VCC  XLXI_17 (.P(XLXN_71));
endmodule
`timescale 1ns / 1ps

module SELECTOR_MUSER_ALU(CLK, 
                          RE, 
                          S0, 
                          S1);

    input CLK;
    input RE;
   output S0;
   output S1;
   
   wire XLXN_10;
   wire XLXN_19;
   wire XLXN_22;
   wire XLXN_23;
   
   FDP  XLXI_4 (.C(CLK), 
               .D(XLXN_23), 
               .PRE(RE), 
               .Q(XLXN_10));
   FDC  XLXI_8 (.C(CLK), 
               .CLR(RE), 
               .D(XLXN_10), 
               .Q(XLXN_19));
   FDC  XLXI_9 (.C(CLK), 
               .CLR(RE), 
               .D(XLXN_19), 
               .Q(XLXN_22));
   FDC  XLXI_10 (.C(CLK), 
                .CLR(RE), 
                .D(XLXN_22), 
                .Q(XLXN_23));
   OR2  XLXI_11 (.I0(XLXN_23), 
                .I1(XLXN_19), 
                .O(S0));
   OR2  XLXI_12 (.I0(XLXN_23), 
                .I1(XLXN_22), 
                .O(S1));
endmodule
`timescale 1ns / 1ps

module ALU(D, 
           OSC, 
           S, 
           SW2, 
           xl, 
           COMM_0, 
           COMM_1, 
           COMM_2, 
           COMM_3, 
           L, 
           M, 
           SEG);

    input [7:0] D;
    input OSC;
    input [7:0] S;
    input SW2;
    input xl;
   output COMM_0;
   output COMM_1;
   output COMM_2;
   output COMM_3;
   output [7:0] L;
   output [7:0] M;
   output [6:0] SEG;
   
   wire [3:0] OP;
   wire S1;
   wire S5;
   wire [7:0] XLXN_5;
   wire [7:0] XLXN_6;
   wire [7:0] XLXN_7;
   wire [7:0] XLXN_8;
   wire XLXN_263;
   
   SELECTOR_MUSER_ALU  XLXI_4 (.CLK(xl), 
                              .RE(SW2), 
                              .S0(S1), 
                              .S1(S5));
   BCD_TO_7SEG_MUSER_ALU  XLXI_14 (.BIT(OP[3:0]), 
                                  .SEG(SEG[6:0]));
   Display_LED_MUSER_ALU  XLXI_69 (.X(S[7:0]), 
                                  .Y(L[7:0]));
   Display_LED_MUSER_ALU  XLXI_70 (.X(D[7:0]), 
                                  .Y(M[7:0]));
   OPERATER_MUSER_ALU  XLXI_72 (.D(D[7:0]), 
                               .S(S[7:0]), 
                               .A(XLXN_5[7:0]), 
                               .SH(XLXN_8[7:0]), 
                               .SU(XLXN_6[7:0]), 
                               .X(XLXN_7[7:0]));
   MUX8to1_MUSER_ALU  XLXI_137 (.CLK200Hz(XLXN_263), 
                               .P1(XLXN_5[7:0]), 
                               .P2(XLXN_6[7:0]), 
                               .P3(XLXN_7[7:0]), 
                               .P4(XLXN_8[7:0]), 
                               .S0(S1), 
                               .S1(S5), 
                               .COM0(COMM_0), 
                               .COM1(COMM_1), 
                               .COM2(COMM_2), 
                               .COM3(COMM_3), 
                               .OP(OP[3:0]));
   Div100K_MUSER_ALU  XLXI_139 (.CN(OSC), 
                               .CO(XLXN_263));
endmodule
